
def buildAndTest(String image, String prefer) {
  sh "composer update --prefer-${prefer} --prefer-dist --no-interaction"
  def exists = fileExists "${workspace}/tests/results"
  while(!exists) {
    echo "Sleeping for 5 seconds..."
    sleep(5)
    sh "ls -l ${workspace}/tests"
    exists = fileExists "${workspace}/tests/results"
    echo "File exists = $exists"
  }
  sh "rm -f tests/results/phpstan.xml"
  sh "rm -f tests/results/phpstan.xml"
  
  if ( "${prefer}" == "stable" ) {
    try {
      sh "composer run phpcs > ${workspace}/tests/results/phpcs.xml"
    } catch (err) {
      echo "PHPCS FAILED"
    }
    try {
      sh "composer run phpstan > ${workspace}/tests/results/phpstan.xml"
    } catch (err) {
      echo "PHPSTAN FAILED"
    }
  }
  try {
    sh 'composer run test'
  } catch (err) {
    echo "PHPUNIT TESTS FAILED"
  }
}


pipeline {
  environment {
    no_proxy     = ".dgfip,.impots,.rie.gouv.fr,100.67.225.0/24"
    http_proxy   = "http://10.154.68.7:8080"
    https_proxy  = "http://10.154.68.7:8080"
    project      = "PHPConfigTree"
    scannerHome  = tool 'sonar-scanner'
    XDEBUG_MODE  = "coverage"
  }
  agent  { label 'rocky8' }
  stages {
    stage('build and test') {
      matrix {
        axes {
          axis {
            name 'IMAGE'
            values 'php74','php81'
          }
          axis {
            name 'PREFERED_PACKAGES'
            values 'stable','lowest'
          }
        }
        agent {
          docker {
            image '$IMAGE'
            reuseNode true
          }
        }
        stages {
          stage('Build and test') {
            options {
              lock( "synchronous-matrix" )
            }
            steps {
              buildAndTest("$IMAGE", "$PREFERED_PACKAGES")
              junit testResults: 'tests/results/*.xml', skipPublishingChecks: true, allowEmptyResults: true
              sh "ls tests/results"
              stash name: "test_${IMAGE}_${PREFERED_PACKAGES}"
            }
          }
        }
      }
    }
    stage('sonarQube') {
      steps {
        unstash name: 'test_php81_stable'
        script {
          projectKey        = "-Dsonar.projectKey=${project}"
          sources           = "-Dsonar.sources=${workspace}/src"
          testReports       = "-Dsonar.php.tests.reportPath=${workspace}/tests/results/*.xml"
          coverage          = "-Dsonar.php.coverage.reportPaths=${workspace}/tests/results/coverage.xml"
          withSonarQubeEnv('Sonarqube-server') {
              sh "${scannerHome}/bin/sonar-scanner ${projectKey} -Dsonar.tests=${workspace}/tests ${sources} ${testReports} ${coverage}"
          }
        }
      }
    }
  }
}