
pipeline {
  environment {
    no_proxy     = ".dgfip,.impots,.rie.gouv.fr,100.67.225.0/24"
    http_proxy   = "http://10.154.68.7:8080"
    https_proxy  = "http://10.154.68.7:8080"
    project      = "PHPConfigTree"
    scannerHome  = tool 'sonar-scanner'
    XDEBUG_MODE  = "coverage"
  }
  agent any
  matrix {
    axes {
      axis {
        name 'IMAGE'
        values 'php74','php81'
      }
      axis {
        name 'PREFERED_PACKAGES'
        values 'stable','lowest'
      }
    }
    agent {
      docker {
        image '$IMAGE'
        reuseNode true
      }
    }
    stages {
      stage('Build') {
        steps {
          sh "composer update --prefer-PREFERED_PACKAGES"
        }
      }
      stage('lint') {
        when {
          environment name: 'PREFERED_PACKAGES', value: 'stable'
        }
        steps {
          sh 'composer run phpcs'
          sh 'composer run phpstan'
        }
      }
      stage('phpunit') {
        steps {
          sh 'composer run test'
          junit 'tests/results/*.xml'
        }
      }
      stage('stash results') {
        steps {
          stash name: 'tests' 
        }
        when {
          expression { $PREFERED_PACKAGES == 'stable' and $IMAGE == 'php81' }
        }
      }
    }
  }
  stages {
    stage('sonarQube') {
      steps {
        unstash name: 'tests'
        script {
          projectKey        = "-Dsonar.projectKey=${project}"
          sources           = "-Dsonar.sources=${workspace}/src"
          testReports       = "-Dsonar.php.tests.reportPath=${workspace}/tests/results/tests-phpunit.xml"
          coverage          = "-Dsonar.php.coverage.reportPaths=${workspace}/tests/results/coverage.xml"
          withSonarQubeEnv('Sonarqube-server') {
              sh "${scannerHome}/bin/sonar-scanner ${projectKey} -Dsonar.tests=${workspace}/tests ${sources} ${testReports} ${coverage}"
          }
        }
      }
    }
  }
}

  // stages {
  //     stage('Tests on php7.4 --prefer stable') {
  //       agent { 
  //         docker {
  //           image 'php74'
  //           reuseNode true
  //         }
  //       }
  //       steps {
  //           sh 'composer update --prefer-stable'
  //           sh 'composer run phpcs'
  //           sh 'composer run phpstan'
  //           sh 'composer run test'
  //       }
  //     }
  //     stage('Tests on php7.4 --prefer-lowest') {
  //       agent { 
  //         docker {
  //           image 'php74'
  //           reuseNode true
  //         }
  //       }
  //       steps {
  //           sh 'composer update --prefer-lowest'
  //           sh 'composer run test'
  //       }
  //     }
  //     stage('Tests on php8.1 --prefer stable') {
  //       agent { 
  //         docker {
  //           image 'php81'
  //           reuseNode true
  //         }
  //       }
  //       steps {
  //           sh 'composer update --prefer-stable'
  //           sh 'composer run phpcs'
  //           sh 'composer run phpstan'
  //           sh 'composer run test'
  //           junit 'tests/results/*.xml'
  //           stash name: 'tests' 
  //        }
  //     }
  //     stage('Tests on php8.1 --prefer-lowest') {
  //       agent { 
  //         docker {
  //           image 'php81'
  //           reuseNode true
  //         }
  //       }
  //       steps {
  //           sh 'composer update --prefer-lowest'
  //           sh 'composer run test'
  //       }
  //     }
  //     stage('sonarQube') {
  //       steps {
  //         unstash name: 'tests'
  //         script {
  //           projectKey        = "-Dsonar.projectKey=${project}"
  //           sources           = "-Dsonar.sources=${workspace}/src"
  //           testReports       = "-Dsonar.php.tests.reportPath=${workspace}/tests/results/tests-phpunit.xml"
  //           coverage          = "-Dsonar.php.coverage.reportPaths=${workspace}/tests/results/coverage.xml"
  //           withSonarQubeEnv('Sonarqube-server') {
  //               sh "${scannerHome}/bin/sonar-scanner ${projectKey} -Dsonar.tests=${workspace}/tests ${sources} ${testReports} ${coverage}"
  //           }
  //         }
  //       }
  //     }
  // }
}
